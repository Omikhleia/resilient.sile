\begin{document}
\chapter{The resilient book class}

The design of the \strong{resilient.book} class was started as an attempt at gradually tuning the
default book class from SILE to this author’s needs and taste. It eventually
evolved into a full redesign on different grounds. This very document uses it,
so you can see it in real action.

\section{Standard sectioning commands}

The class supports the following sectioning commands, from the highest
division level to the lowest: \autodoc:command{\part}, \autodoc:command{\chapter},
\autodoc:command{\section}, \autodoc:command{\subsection}, \autodoc:command{\subsubsection}.

All sectioning commands obey styles (relying on the
\autodoc:package{resilient.styles} and \autodoc:package{resilient.sectioning} packages), which notably
imply that they have a lot of customization possibilities.
In the following pages, the described behaviors apply to the default
configuration and styling, out-of-the-box.

All the sections accepts the \autodoc:parameter{numbering=false} option, if you want
them unnumbered, and the \autodoc:parameter{toc=false} option, if you do not want them
to appear in the table of contents. When they do, they correspond to “level 0”
(parts) up to “level 4” (subsubsections).

Remember a good advice—“Writers that think they need more than five levels should
instead consider restructuring their document in a manner that does not require
this level of nested sectioning. Increased section granularity can actually begin
to detract from document clarity.”

\define[command=ptable:cell:hook]{\raggedright{\noindent\style:font[size=0.9em]{\process}}}%
% FIXME Maybe the class should load ptable and override the hook to actually supported
% styles, that would be both convenient and consistent.
\begin{table}
\begin[cols=40%fw 50%fw, header=true]{ptable}
  \begin[background=#eee]{row}
    \cell[valign=top]{Style}
    \cell[valign=top]{Description}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{sectioning-base}}
    \cell[valign=top]{(Paragraph style inherited by all sectioning commands.)}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{sectioning-⟨\em{section type}⟩}}
    \cell[valign=top]{(Sectioning) style applied to that sectioning command.}
  \end{row}
\end{ptable}
\caption{Styles used for sectioning commands.}
\end{table}

By default, parts disable page numbering and running headers on their page.
Chapters have page numbering enabled on their first page and make sure
no header shown is shown on that page. Both start on an odd page\footnote{Again,
as almost everything depending on styles, this can be customized.}, and the previous
even page, if inserted blank, is shown without page number and header. Parts and chapters
reset the footnote counter. Chapter and section titles go in odd and even running
headers respectively, unless customized otherwise.

Notably, the class also defines a few commands currenty used as hooks in some of the
above sectioning styles.

\begin{table}
\begin[cols=40%fw 50%fw, header=true]{ptable}
  \begin[background=#eee]{row}
    \cell[valign=top]{Command}
    \cell[valign=top]{Description}
  \end{row}
  \begin{row}
    \cell[valign=top]{\autodoc:command{\sectioning:part:hook}}
    \cell[valign=top]{Clears all page headers, disable the folios globally,
      resets the footnote counter and the chapter counter.}
  \end{row}
  \begin{row}
    \cell[valign=top]{\autodoc:command{\sectioning:chapter:hook}}
    \cell[valign=top]{Clears the header on the current page, re-enables folios, resets
      the footnote counter and adds the chapter title to the even running headers (see further below).}
  \end{row}
  \begin{row}
    \cell[valign=top]{\autodoc:command{\sectioning:section:hook}}
    \cell[valign=top]{Adds the section title to the odd running headers (see further below), with its
      counter preprended to it.}
  \end{row}
\end{ptable}
\caption{Predefined command hooks used by sectioning commands.}
\end{table}

\section{Captioned figures and tables}

The class provides two additional environnments, \autodoc:environment{figure}
and \autodoc:environment{table}. Both can contain arbitrary contents and a
\autodoc:command[check=false]{\caption{<text>}} element. The latter is
extracted and displayed below the contents.
By default, these environments show their contents centered, with a numbered caption.
Each of them has its own distinct counter.
The figure environment is (normally) intended to be used around an illustration.

\begin{table}
\begin[cols=40%fw 50%fw, header=true]{ptable}
  \begin[background=#eee]{row}
    \cell[valign=top]{Style}
    \cell[valign=top]{Description}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{figure}}
    \cell[valign=top]{Style applied to the figure content (not including the caption).}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{figure-caption}}
    \cell[valign=top]{(Sectioning) style applied to the figure caption.}
  \end{row}
\end{ptable}
\caption{Styles used for figures.}
\end{table}

The table environment is (normally) intended to be used around… tables, you would
have guessed it.

\begin{table}
\begin[cols=40%fw 50%fw, header=true]{ptable}
  \begin[background=#eee]{row}
    \cell[valign=top]{Style}
    \cell[valign=top]{Description}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{table}}
    \cell[valign=top]{Style applied to the table content (not including the caption).}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{table-caption}}
    \cell[valign=top]{(Sectioning) style applied to the table caption.}
  \end{row}
\end{ptable}
\caption{Styles used for tables.}
\end{table}

The figure and table caption styles are actually sectioning styles, and the captions are
inserted into the table of contents at level 5 and 6 respectively. It implies that one has
the possibility to have them shown in the TOC, if passing a sufficient \autodoc:parameter{depth}
value to the \autodoc:command{\tableofcontents} command. While some authors may appreciate that,
other, most likely, prefer having them in separate lists. Two convenience commands are
provided to that effect.

\begin{table}
\begin[cols=40%fw 50%fw, header=true]{ptable}
  \begin[background=#eee]{row}
    \cell[valign=top]{Command}
    \cell[valign=top]{Description}
  \end{row}
  \begin{row}
    \cell[valign=top]{\autodoc:command{\listoffigures}}
    \cell[valign=top]{Outputs the list of figures.}
  \end{row}
  \begin{row}
    \cell[valign=top]{\autodoc:command{\listoftables}}
    \cell[valign=top]{Outputs the list of tables.}
  \end{row}
\end{ptable}
\caption{Commands for lists of figures and tables.}
\end{table}

But basically, they are just simple calls to \autodoc:command{\tableofcontents} with the
appropriate options to start at the corresponding TOC level and display only that level.
The only noteworthy advantage is that they check the styles in order to find out which
level is concerned, so they may apply even if TOC levels are customized differently.

As a final but important note, despite their name, the figure and table environments
are not “floating” objects in the sense that this concept has in LaTeX. In other terms,
they are always inserted where declared in the page, without attempt to possibly move
their material to some other position or a later page.

\section{Headers & Footers}

Page numbers (folios) and running headers are by default flushed left or right depending
on the page they are on, rather than centered. This is defined via paragraph styles, so it
can actually be customized at convenience. The default styles also include an inheritance
to a common “base” style (suitable for selecting the font size, etc.). Nothing mandates
it, but if you want to redefine these styles, we recommend keeping an appropriate
style hierarchy, rather than stacking all definitions in a single style. Well-thought,
it can simplify the task for other later customizations.

\begin{table}
\begin[cols=40%fw 50%fw, header=true]{ptable}
  \begin[background=#eee]{row}
    \cell[valign=top]{Style}
    \cell[valign=top]{Description}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{folio-base}}
    \cell[valign=top]{(Style inherited by the other folio styles.)}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{header-base}}
    \cell[valign=top]{(Style inherited by the other header styles.)}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{folio-even}}
    \cell[valign=top]{(Paragraph) style applied to the folio on even pages.}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{folio-odd}}
    \cell[valign=top]{(Paragraph) style applied to the folio on odd pages.}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{header-even}}
    \cell[valign=top]{(Paragraph) style applied to the header on even pages.}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{header-odd}}
    \cell[valign=top]{(Paragraph) style applied to the header on odd pages.}
  \end{row}
\end{ptable}
\caption{Styles used for folios and headers.}
\end{table}

The class also defines two commands for manipulating the page headers.

\begin{table}
\begin[cols=45%fw 45%fw, header=true]{ptable}
  \begin[background=#eee]{row}
    \cell[valign=top]{Command}
    \cell[valign=top]{Description}
  \end{row}
  \begin{row}
    \cell[valign=top]{\autodoc:command{\even-running-header{<content>}}}
    \cell[valign=top]{Registers the content to be used in even running headers.}
  \end{row}
  \begin{row}
    \cell[valign=top]{\autodoc:command{\odd-running-header{<content>}}}
    \cell[valign=top]{Registers the content to be used in odd running headers.}
  \end{row}
  \begin{row}
    \cell[valign=top]{\autodoc:command{\even-tracked-header{<content>}}}
    \cell[valign=top]{Registers the content to be used in even running headers, tracked.}
  \end{row}
  \begin{row}
    \cell[valign=top]{\autodoc:command{\odd-tracked-header{<content>}}}
    \cell[valign=top]{Registers the content to be used in odd running headers, tracked.}
  \end{row}  
\end{ptable}
\caption{Commands for manipulating page headers.}
\end{table}

The “tracked” variants ensure the content is tracked per page (using “info nodes”), which is usually what you want for section headers.
The other versions do not introduce info nodes, are intended to be used with direct content (such as a document title) or content already tracked elsewhere.

Page headers rely on the functionality provided by the \autodoc:package{resilient.headers} package,
so the \autodoc:command{\noheaders}, \autodoc:command{\noheaderthispage} and \autodoc:command{\headers}
commands are available, as well as \autodoc:command{\header:rule}.

\section{Block-indented quotes}

The class provides the \autodoc:environment{blockquote} environment to typeset simple block-indented
paragraphs of the kind shown in the \autodoc:package{resilient.styles} package documentation. It is sort
of an extra, but it was so often needed by this author that he decided to include it in
standard.

The environment relies on the same-named style for its styling and on the
\autodoc:setting{book.blockquote.margin} setting for its indentation (defaults to 2em). Indented
quotes can be nested.

\section{Other features}

The footnotes are based on the \autodoc:package{resilient.footnotes} package and therefore have the
extra features proposed in this implementation, notably the \autodoc:command{\footnote:rule}
command and the possibility to specify an explicit \autodoc:parameter{mark} on footnote calls.

The table of contents relies on the \autodoc:package{resilient.tableofcontents} package. One can
therefore change many styling and appearance aspects to create a custom table of contents.

Cross-references are supported via the \autodoc:package{labelrefs} package, henceforth
the \autodoc:command{\label}, \autodoc:command{\ref} and \autodoc:command{\pageref} commands are
available.

\medskip
A few layout-related commands are also provided.

The \autodoc:command{\layout[layout=<layout spec>]} command inserts a page break and changes the page layout from that point. An optional \autodoc:parameter{offset=<dimen>} may be specified to also alter the binding offset. By default, the global offset (that is, as possibly defined via the corresponding class option) is used.

Mostly intended for documentation, the \autodoc:command{\showlayout[layout=<layout spec>, papersize=<paper spec>]} command outputs an image representing the selected page layout and paper size.
Optional parameters are \autodoc:parameter{offset=<dimen>} for the binding offset (0, that is no offset, by default), \autodoc:parameter{ratio=<number>} for the image down-scaling (dividing the paper size by the specified amount, 6.5 by default), and \autodoc:parameter{rough=<boolean>} (false by default).

\chapter{A \em{curriculum vitae} class}

The \strong{resilient.resume} class provides a minimalist (read, naive) way to make a modern \em{résumé} (CV) with SILE.

\smallskip
\begin{itemize}
\item{Fonts}
\begin{itemize}
  \item{You should select, early in your document, the main font to be used. This class ideally
        works best with a font family that has: a thin style, an italic style, a light-weight (300)
        bold italic, a bold (600) regular. Lato, for instance, is such a font.}
  \item{Dingbat symbols rely on the Symbola font. You can change it by redefining the \code{resume-dingbats}
        style.}
  \end{itemize}
  \item{Colors should not be abused in a CV, so this class proposes only three different colors.}
  \begin{itemize}
    \item{Two tints of gray for your first and last name, job title and headline.}
    \item{A nice tint of blue (#4080bf) for various sectioning and display elements. You can change it
        by redefining the \code{resume-color} style.\footnote{Likewise, your first and last names
        correspond to the \code{resume-firstname} and \code{resume-lastname} styles respectively.}}
  \end{itemize}
  \item{Page layout}
  \begin{itemize}
  \item{The first page does not have a header, but on subsequent pages the header repeats your full name.
        The rationale is that your name shall be visible on each page, as the HR people get hundreds of CVs and
        can easily get lost in them.}
  \item{The footer is shown side-by-side with the page folio, and contains your contact information. As for
        the header, the rationale is that your contacts should be repeated. You wouldn’t want not to be
        contacted just because the HR people lost the initial page, right?}
  \item{The folio includes the number of pages in your CV. As said, they
        get to see hundreds of CV. Be nice ensuring they have no ordering issue when handling a printed
        copy to managers, and do not miss any page.}
  \end{itemize}
\end{itemize}

\smallskip

The commands are pretty simple and straightforward in this first version, so you can refer
to the sample CV included in our example repository.

\begin{figure}
\framebox[padding=0, shadow=true, shadowcolor=220]{\img[width=45%fw, src=examples/resume-sample.pdf, page=1]}%
\kern[width=3pt]%
\framebox[padding=0, shadow=true, shadowcolor=220]{\img[width=45%fw, src=examples/resume-sample.pdf, page=2]}
\caption{A sample CV for a famous detective.}
\end{figure}

%\chapter{XML TEI P4 print dictionaries}
%
% This class is a book-like class for (XML) TEI dictionaries.
%
% It just defines the appropriate page masters, sectioning hooks
%and loads all needed packages. The hard work processing the
%XML content is done in the \autodoc:package{teidict} package.
%
%This author does not intend to discuss it in full here.
%To see it in action, you can refer to our small example in
%\href[src=https://github.com/Omikhleia/omikhleia-sile-packages/tree/main/examples]{our
%repository}\footnote{\url{https://github.com/Omikhleia/omikhleia-sile-packages/tree/main/examples}}.
%For a more complex project using the same tools, you may also check
%the \href[src=https://omikhleia.github.io/sindict/]{sindict
%repository}\footnote{\url{https://omikhleia.github.io/sindict/}}.

\end{document}
