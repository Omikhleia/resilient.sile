# Writing a master document

Say you have a collection of individual chapters (or any other appropriate division scheme) in Djot, Markdown or even SIL, and you want to gather these as a single book, with all bells and whistles.

Seasoned users experienced with the SIL language surely know how to write a "wrapper" document in that format, invoking all required commands and including their content files.
All the low-level constructs are there for them to do so.
There are some things, however, that they will end up doing all the time, repetitively: at the very least, pick up a font, set a main language, load fairly standard packages, set PDF metadata...
Moreover, if your content, or most of it, was authored in Djot or Markdown[^md-metadata-blocks], it feels quite cumbersome to have to write such a wrapper in SIL syntax, doesn't it ?

[^md-metadata-blocks]: Several Markdown processors support metadata blocks as a special construct in (extended) Markdown, with a varying syntax and often _ad hoc_ conventions.
We are trying, here, to be more general and consistent, regardless of the input format.

The resilient collection introduces a "master document" format which aims at simplifying and streamlining the process, abstracting the wearisome tasks and taking care of (most of) the usual needs.

![Using a resilient master document.](manual-masterdoc/masterdoc-workflow.dot){width=7cm}

Master documents usually have the `.silm` extension and can be processed as shown below.

```shell
sile -u inputters.silm mybook.silm
```

The format consists in a simple description of the book properties and content, expressed in [YAML](https://en.wikipedia.org/wiki/YAML), a lightweight human-readable data-representation language.
Here is an example, showing most of the basic elements.

```yaml
masterfile: 1.0
metadata:
  title: Excerpts from the Chronicles of Alstre
  subtitle: Annotated tales from the works of the poet Celdre 
  subject: Translation and commentary
  keywords:
    - Mythology
    - Fantasy
  authors: Emma Lenski
  translators: Sylvain Forestier
  publisher: Omikhleia
  pubdate: 2023-07-14
  isbn: 978-1-4028-9462-6
  url: https://github.com/Omikhleia/resilient.sile
  copyright: © 2023, Omikhleia.
  legal: Tous droits réservés.
font:
  family: [EB Garamond, Libertinus Serif]
  size: 12pt
language: fr
sile:
  options:
    # class: resilient.book # (default choice if not set)
    papersize: 6in x 9in
    layout: ateliers demiluxe
    headers: novel
    resolution: 300
  settings:
    textsubsuper.fake: false
    typesetter.italicCorrection: true
  packages:
    - resilient.poetry
content:
  chapters:
    - chap1.dj
    - chap2.dj
```

The `masterfile` entry is a number corresponding to a version, for compatibility purposes.[^masterdoc-compat]

[^masterdoc-compat]: Currently unused, but it may become useful if we introduce breaking changes in the master document format later.

## The metadata section

[^:icon-pdf-metadata:]: ^:U+25C6:^

[^:icon-running-headers:]: ^:U+25CB:^

[^:icon-back-cover:]: ^:U+25CF:^

The `metadata` object contains several general document properties.
All these properties are optional, but some are used in specific contexts when available:

 - Properties marked :icon-pdf-metadata: are automatically used as PDF metadata.

 - Properties marked :icon-running-headers: may be used in running headers (depending on the document class and its options, see further below).

 - Properties marked :icon-back-cover: are used on the back cover, if enabled.

{variant="Simple"}
: `title` :icon-pdf-metadata: :icon-running-headers: 

  The title of your book (string).

: `subtitle`

  The subtitle of your book (string).

: `subject` :icon-pdf-metadata:

  The subject of the book (string).

: `keywords` :icon-pdf-metadata:

  Keywords for the book (string or array of strings).

: `authors` :icon-pdf-metadata:

  The author(s) of the book (string or array of strings).

: `translators`

  The translator(s) of the book (string or array of strings).

: `publisher`

  The publisher of the book (string).

: `pubdate`

  The publication date of the book (date, such as `2023-07-14`).

: `isbn` :icon-back-cover:

  The ISBN of the book (string).

: `url`

  The URL of the book (string) when applicable.

: `copyright`

  The copyright notice of the book (string).

: `legal`

  The legal notice of the book (string).

All properties are made available to the content files.
In the current implementation, this is only effective with Djot documents, wherein the medatada are exposed as Djot symbols (e.g. `:title:`, `:authors:`, and so on).
For convenience, the singular forms `:author:` and `:translator:` are also exposed, and contain the first entry.
The publication date is also expanded in Djot as `:pubdate-year:`, `:pubdate-month:`, and `:pubdate-day:` to access the components separately.
Book matters (cover, title page, etc.), covered in a further chapter, may also use these metadata.

## The font section

The `font` object defines the default main font to use in the book.

{variant="Simple"}
: `family`

  The main font family to use, as a string or an array of strings.
  In the latter case, the first font is used as default font and the others are declared as "font fallbacks", would some characters be unavailable.

: `size`

  The default font size, usually expressed in points (e.g. `12pt`).

## The SILE configuration section

The `sile` object provides intructions for processing the master document with, guess what, the SILE typesetting engine.

### Configuration options

The `options` are to be understood as document class options. (As such, they can notably be overridden from the command line when invoking SILE.)
The optional `class` key specifies the document class to use.

It defaults to `resilient.book`.
Usually you will not need to set it, as the default choice is already a good one, and there is no guarantee that other classes will support the same level of features.
The other options depend on that document class.
Using the *resilient.book* class, the following options are available:

{variant="Simple"}
: `papersize`

  The paper size to use, as a known paper size (`letter`, `a4`, etc.) or custom dimensions (e.g. `6in x 9in`).
  Default is `a4`.

: `layout`

  The global page layout (see part [](#page-layout)).
  Default is `division`.

: `offset`

  The binding offset (see part [](#page-layout)).

: `headers`

  What goes in the running headers depends on this option.
  The accepted values are listed below.

  {variant="Simple"}
  : `none`

    No running headers.

  : `technical` (default)

    Chapter and section titles go in the even and odd running headers, respectively.

  : `novel`

     Chapter titles go in the odd running headers, and the title of the book, if set, goes in the even running headers.

: `resolution`

  The global resolution in DPI (dots per inch).
  Some add-on packages may use it in order to compute the size of generated images, transform external images, etc.

### Configuration settings

The `settings` can be used to globally set some SILE parameters.
A few usual suggestions are listed below for convenience, but please refer to the SILE documentation for standard parameters and parts
[](#resilient-packages)--[](#resilient-classes) in this manual for resilient-specific parameters.

{variant="Simple"}
: `textsubsuper.fake` (boolean)

  Whether to use fake superscript and subscript glyphs when the font does not provide them.
  It highly depends on the font used and the quality of its superscript and subscript glyphs, so you will have to test it.

: `typesetter.italicCorrection` (boolean)

  Whether to apply an italic correction heuristic when text switches between italic and upright.
  The recommended value is `true`, but you may want to keep it disabled with certain choices of fonts.

### Extra packages

The `packages` object lists extra packages that SILE must use.
It can be used to load add-on packages needed by your content but not already provided by the document class and its supporting packages.

Since the **resilient.book** document class already loads most of its supporting packages, you should only list the extra packages you need for specific content.
As far as resilient packages are concerned, a few notable suggestions are:

 - **resilient.poetry** for poetry typesetting.
 - **printoptions** for advanced print options & tools for professional printers.
  
{#masterdoc-content-basic}
## Up to the content

Last but not least, after the important but mundane sections, it is time to organize the actual content of your book.

![From files to chapters and parts](images/book-parts-chapters.svg){width="65%"}

For the sake of simplicity, let's consider you have a bunch of files in Djot or Markdown, each representing a chapter---that, is files all starting with a level 1 heading.
We'll consider more complex structures later.

In the simplest case, chapters consists in an ordered list of file names.
These files may be of any type supported by SILE, the document class or loaded packages.[^masterdoc-nesting]

```yaml
content:
  chapters:
    - chap1.md
    - chap2.dj
```

This is actually a convenience short form for the fuller syntax.

```yaml
chapters:
  - file: chap1.md
  - file: chap2.dj
```

In this structured form, other fields are accepted, for enforcing the input format (which can be useful if the extension is non-standard) and the options passed to the input handler.

```yaml
chapters:
  - file: chap1.txt
    format: markdown
    options:
      smart: false # disable smart typography support in Markdown
```

There is another structured form which just takes a "caption" string.
To be honest, it's mostly provided as a quick convenience placeholder.
This author mostly uses it when drafting a book, to quickly sketch the structure before adding the actual content.

```yaml
chapters:
  - caption: My adventures
```

It's the perfect time now to introduce you with content nesting and header shifting.
All structured forms accept a `content` entry, which is again a list of files to include, with the exact same rules.
With Djot, Markdown or other formats supporting this feature,[^masterdoc-sil-nesting] the headings in these files are then _shifted_.

```yaml
chapters:
  - file: chap1.dj # Level 1 headings = chapters, etc.
    content:
      - file: sect.dj # Level 1 headings = sections, etc.
```

So let's now consider a more complex structure, with several "parts."
With document classes supporting parts, such as *resilient.book*, it allows using them, starting at that level.

```yaml
content:
  parts:
    - part1.dj
      content:
        - chap1.dj
   ...
```

Each document file, here, begins with a level 1 heading.
But the book now starts with a part, and the chapters are included in it, with their headings shifted accordingly.
Would you want to split your sections in several files, as if they were independent (also starting with a level 1 heading), you can nest them in the same way, and they will be included, appropriately shifted, in the chapters.
And so on for deeper levels.

In the next chapters, we will see even more complex structures, with front, main and back matters, appendices, and more.
But for now, you have all the basics to start assembling your book.

[^masterdoc-nesting]: In particular, you may include a master document in another.
In that case, though, only the declared extra packages and the content files are used.

[^masterdoc-sil-nesting]: Not available for SIL documents.

## Abusing the master document format

The master document format is quite flexible and adaptable to various use cases.

However, it's primarily a "high-level" description of a book's structure, leaving the specifics of the content files entirely up to you.
For better or worse, it's fairly easy to abuse.

You can use low-level commands in SIL or Lua, and break all reasonable expectations.
But even without going that far, let's consider the following example.

```yaml
content:
  parts:
    - content:
        - introduction.dj
    - caption: Part 2
      content:
        - chapter1.dj
```

The introduction is in an anonymous part.
Its headers are therefore offset, as explained above, aren't they?
And you end up with a chapter preceeding the first part.
This is sometimes very practical, but the "true" way to do it would be a front matter division.
We will see that in a moment, but mentioning such a trick is still worth it. It may have its uses in certain cases.

Similarly, if a chapter-level file in your master document doesn't begin with a level 1 title, it will be included as is,
and semantically, it belongs to the _previous_ part or chapter.
In other words, you can divide your content any way you like, and do some fancy things with it.
The master document format is only a tool and a guide, not a straitjacket.

> "I have spoken.
> This is the way."
^ _The Mandalorian_ (Series).
