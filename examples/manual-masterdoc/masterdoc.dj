# Writing a master document

Say you have a collection of individual chapters (or any other appropriate division scheme) in Djot, Markdown or even SIL, and you want to gather these as a single book, with all bells and whistles.

Seasoned users experienced with the SIL language surely know how to write a "wrapper" document in that format, invoking all required commands and including their content files.
All the low-level constructs are there for them to do so.
There are some things, however, that they will end up doing all the time, repetitively: at the very least, pick up a font, set a main language, load fairly standard packages, set PDF metadata...
Moreover, if your content, or most of it, was authored in Djot or Markdown[^md-metadata-blocks], it feels quite cumbersome to have to write such a wrapper in SIL syntax, doesn't it ?

[^md-metadata-blocks]: Several Markdown processors support metadata blocks as a special construct in (extended) Markdown, with a varying syntax and often _ad hoc_ conventions.
We are trying, here, to be more general and consistent, regardless of the input format.

The resilient collection introduces a "master document" format which aims at simplifying and streamlining the process, abstracting the wearisome tasks and taking care of (most of) the usual needs.

![Using a resilient master document.](manual-masterdoc/masterdoc-workflow.dot){width=7cm}

Master documents usually have the `.silm` extension and can be processed as shown below.

```shell
sile -u inputters.silm mybook.silm
```

The format consists in a simple description of the book properties and content, expressed in [YAML](https://en.wikipedia.org/wiki/YAML), a lightweight human-readable data-representation language.
Here is an example, showing most of the elements.

```yaml
masterfile: 1.0
metadata:
  title: Excerpts from the Chronicles of Alstre
  subtitle: Annotated tales from the works of the poet Celdre 
  subject: Translation and commentary
  keywords:
    - Mythology
    - Fantasy
  authors: Emma Lenski
  translators: Sylvain Forestier
  publisher: Omikhleia
  pubdate: 2023-07-14
  isbn: 978-1-4028-9462-6
  url: https://github.com/Omikhleia/resilient.sile
  copyright: © 2023, Omikhleia.
  legal: Tous droits réservés.
font:
  family: [EB Garamond, Libertinus Serif]
  size: 12pt
language: fr
sile:
  options:
    # class: resilient.book # (default choice if not set)
    papersize: 6in x 9in
    layout: ateliers demiluxe
    headers: novel
    resolution: 300
  settings:
    textsubsuper.fake: false
    typesetter.italicCorrection: true
  packages:
    - resilient.poetry
content:
  chapters:
    - chap1.dj
    - chap2.dj
```

The `masterfile` entry is a number corresponding to a version, for compatibility purposes.[^masterdoc-compat]

[^masterdoc-compat]: Currently unused, but it may become useful if we introduce breaking changes in the master document format later.

## The metadata section

The `metadata` object contains several general document properties.

 - The `title`, `authors`, `subject` and `keywords` will automatically be used as PDF metadata.

 - As denoted by the plural, `authors`, `translators` and `keywords` may consist in a list of strings, but they also accept a single string.

 - The `title` may be used in running headers (possibly, depending on the document class and its options).

All properties are passed as metadata made available to the content files.
In the current implementation, this is only effective with Djot documents, wherein the medatada are exposed as Djot symbols (e.g. `:title:`, `:authors:`, and so on).
For convenience, for authors and translators, the symbols `:author:` and `:translator:`{.nobreak} are also exposed, and contain the first entry.

## The font section

The `font` object defines the _default_ font, as a font `family` and a `size`.

 - The `family` is either a font name (as a string) or an array of font names.
   In the latter case, the first font is used as default font and the others are declared as "font fallbacks", would some characters be unavailable.
 - The `size`, as expected, is the default font size, usually expressed in points.

## The SILE configuration section

The `sile` object provides intructions for processing the master document with SILE.

 - The `options` are to be understood as document class options.
  (As such, they can notably be overridden from the command line when invoking SILE.)

   - If you don't specify a `class` then *resilient.book* is assumed.

   - Other supported options are `papersize`, and, with the resilient book class, `layout`, `offset`, `headers` and `resolution`.

- The `settings` can be used to globally set some SILE parameters.

- The `packages` object lists extra packages that SILE must use.
  It can be used to load add-on packages needed by your content but not already provided by the document class and its supporting packages.

{#masterdoc-content-basic}
## Up to the content

Last but not least, the `chapters` array (or `parts`, see further below) lists the files to include in the work.
In its simplest form, it consists in an ordered list of file names.
These files may be of any type supported by SILE, the document class or loaded packages.[^masterdoc-nesting]

```yaml
chapters:
  - chap1.md
  - chap2.dj
```

This is actually a convenience short form for the fuller syntax.

```yaml
chapters:
  - file: chap1.md
  - file: chap2.dj
```

In this structured form, other fields are accepted, for enforcing the input format (which can be useful if the extension is non-standard) and the options passed to the input handler.

```yaml
chapters:
  - file: chap1.txt
    format: markdown
    options:
      smart: false # disable smart typography support in Markdown
```

There is another structured form which just takes a "caption" string.
To be honest, it's mostly provided as a quick convenience placeholder.

```yaml
chapters:
  - caption: My adventures
```

It's the perfect time now to introduce you with content nesting and header shifting.
All structured forms accept a `content` entry, which is again a list of files to include, with the exact same rules.
With Djot, Markdown or other formats supporting this feature,[^masterdoc-sil-nesting] the headings in these files are then _shifted_.

```yaml
chapters:
  - file: chap1.dj # Level 1 headings = chapters, etc.
    content:
      - file: sect.dj # Level 1 headings = sections, etc.
```

We earlier mentioned the `parts` keywords.
With document classes supporting parts, such as *resilient.book*, it allows using them, starting at that level.[^masterdoc-astute]

[^masterdoc-nesting]: In particular, you may include a master document in another.
In that case, though, only the declared extra packages and the content files are used.

[^masterdoc-sil-nesting]: Not available for SIL documents.

[^masterdoc-astute]: Astute readers will realize that the `chapters` structure is just a convenience facility.
