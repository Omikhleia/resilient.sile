\begin[papersize=6in x 9in, class=resilient.book, layout=ateliers:4]{document}
%\use[module=hacks/hack-1361]% HACKS/WORKAROUNDS FOR SILE 0.12.x BUGS
%\use[module=hacks/hack-1362]% HACKS/WORKAROUNDS FOR SILE 0.12.x BUGS
\use[module=packages.autodoc]
\set[parameter=autodoc.highlighting, value=true]
\use[module=packages.url]
\use[module=packages.image]
\use[module=packages.color]
\use[module=packages.background]
\use[module=packages.couyards]
\use[module=packages.resilient.lists]
\use[module=packages.ptable]
\use[module=packages.framebox]
\use[module=packages.fancytoc]
\language[main=en]
\font[family=Libertinus Serif]
\define[command=codeblock]{\font[family=Libertinus Sans]{\process}}
\footnote:rule
\header:rule
\set[parameter=linebreak.emergencyStretch, value=15%lw]
\pdf:metadata[key=Title, value=The resilient collection of classes & packages]
\pdf:metadata[key=Author, value=Didier Willis]

% We do not have a true titlepage for now, build it manually.
\background[color=#e9d8ba,allpages=false]
\noheaderthispage
\nofoliothispage
\hbox{}\vfill

\begin{center}
\font[size=20pt]{The resilient collection

of classes & packages

for SILE

}
\end{center}

\smallskip
\begin{center}
\font[size=16pt]{A redesigned version

of

Omikhleia’s classes & packages

}
\end{center}
\vfill

\break

% Now a legal matter page
\hbox{}

\vfill

© 2021–2022 Didier Willis.

This material may be distributed only subject to the terms and conditions set forth in the
Creative Commons Attribution, Share-Alike License,
version 2.0 (http://creativecommons.org/licenses/by-sa/2.0/).

\hbox{}\par\break%
%
\noheaderthispage%
\nofoliothispage%
%
% There we go for the content.
%
\chapter[numbering=false, toc=false]{Contents}
\noheaders

\tableofcontents

\section[numbering=false, toc=false]{Figures}

\listoffigures

\section[numbering=false, toc=false]{Tables}

\listoftables

\chapter[numbering=false]{Preface to the first edition}

\hfill{}November 20, 2021.

\smallskip

If this booklet has a page size of 6 inches × 9 inches, it is not to make you waste
paper (assuming you could possibly want to print it in A4 or US letter), but
just because it is the format I use the most for printed books and I wanted to
ensure my classes and packages looked functional with it.
But let’s rewind, here… On August 29, 2021, I decided to give a try to the SILE
typesetting system.
This booklet could have been called “My First Journey with SILE” as it is
the result of these experiments.

To proceed orderly, I considered a book I had aready typeset with another
software–for what it matters, LibreOffice–and looked how I could
do it again with SILE. I had no intent to redo the whole book, of course,
but the overall structure and a sample chapter would do. If you already
have some typeset content available at hand, I recommend this method,
would you want to switch to SILE (or to any other solution).
It is a good way to ascertain your needs and
to rethink the kind of things you are used to do or you had solved there, though
differently.
If I had to typeset that book, however, the version of SILE at the time (that was
0.10.15) somehow lacked many supporting packages for the sort of things I usually
write.

First, just at a glance, there were a few general issues. My book was in French and
the typographic rules for punctuations in that language were not yet fully implemented.
I proposed a fix that eventually got accepted. The book had also long footnotes which
contained fairly long and hard-to-break URLs, so I ended up contributing a few fixes
and improvements here too. All articles used “dropped capitals” and these did not
work well at the time. I also proposed a new implementation which was eventually
reviewed and integrated with even nicer features than my initial attempt. The SILE
community might still be small, but it is live and great.

The book had a non-obvious table of contents where entries, depending on their level,
did not always show a page number or the usual dots (leaders). I needed more customization
than offered by the default table of contents package. It lead to the creation
of the \autodoc:package{resilient.tableofcontents} package.
Likewise, I felt I needed more control on (running) page headers and it lead
to the \autodoc:package{resilient.headers} package.
I mentioned footnotes earlier; I eventually had to consider
more changes to them in order to match the target book: \autodoc:package{resilient.footnotes}
saw the light.
I did not mention yet that the book was a collection of essays with a good bunch of
cross-references between them–and even, from a footnote in an essay to a footnote in another.
Trying to do the things right, the \autodoc:package{labelrefs} package was born.

Looking at the sample chapter I had selected, it started and ended with quotations,
or rather “epigraphs”. It ended with some nice floral motif. So I wrote
the \autodoc:package{resilient.epigraph} and \autodoc:package{couyards}
packages. I then had almost all the building blocks to typeset this essay, at last.

Yet, even if I did not plan to typeset the whole book again, as stated, I looked
through the other chapters to check their needs. One had complex tables and the simple
table package from SILE was clearly insufficient. So logically, it lead me to find
a solution, in the form of the \autodoc:package{ptable} package and the
low-level \autodoc:package{parbox} at its core. It also turned to be useful for this very documentation,
which I had decided to compose using the same tools.
In the same vein, enumerations and bullet lists were used. I did not really need to
support many nested levels, but why not anyway. The \autodoc:package{resilient.lists} package
was born.
More marginally, one of the essays included a poem and a discussion of its prosody.
I wrapped up the \autodoc:package{resilient.poetry} package as a first attempt to address it.
The book had a fancy “colophon” at its end, where the editor–that is, I–thanked the
authors, contributors and proofreaders. I wanted to play around that idea:
the \autodoc:package{colophon} package is a somehow experimental approach to it.
On this journey, small recurring details appeared and were extracted as
the \autodoc:package{textsubsuper} and \autodoc:package{resilient.abbr} packages. When testing,
I also wanted an easy way to tweak commands without always having to change
their Lua code, so \autodoc:package{redefine} was written. I have to confess it was
one of my first packages but, as I progressed, I did not use it that often.

Last but not least, a book class was obviously needed but the default one
had to be extended to rely on some of the abovementioned packages. I was
also concerned that “hooks” did not seem the right way to handle customizations.
After several false starts, what had begun as a mere adaptation of the
existing book class gradually became another beast, abstracting styling decisions in the
\autodoc:package{resilient.styles} and \autodoc:package{resilient.sectioning} packages–and those also
made their way into several of the previous packages.
The \code{resilient.book} class logically concluded that journey… Well, my
dabbling into SILE also produced a few other by-products. To check that my
implementation for tables could be generalized to other needs, I played around
the idea of using it for a \em{résumé}. It lead to the \code{resilient.resume} class.
In parallel, I couldn’t resist checking if SILE could also help me in another
project; it resulted in a class and packages for (a specific kind of) XML TEI
dictionaries.

Let’s conclude, temporarily, the so-said journey. It may seem that I had to write
many packages to reach my aim. On the other hand, it also proves that SILE
is flexible and versatile, with a very decent learning curve.
I cannot thank Simon Cozens and the SILE community enough for all their
achievements. The software has a great code base and it is really enjoyable
to work with.

\medskip
\couyard[type=8,width=default]

\chapter[numbering=false]{Preface to the second edition}

\hfill{}May 23, 2022.

\smallskip

Let’s tell a story from another viewpoint. When I decided to have a deeper look
at SILE in early Sept. 2021, version 0.10.15, as already stated, fell short of
meeting my requirements. Still, I did not want to just reject it on that quick
basis and decided to give my attempts a “3-month charter”, to write the packages
and classes I felt needed to minimally cover my needs. The result of that effort
was presented in the previous preface.

The questions I had, then, were:
\begin{itemize}
\item{Can SILE be used to typeset a book?}
\item{Can SILE really be used to typeset books?}
\end{itemize}

Note that the second question only differs from the first in its plural form.
It tells a lot: There’s a clear gap between tweaking things and avoiding issues,
on one hand; and considering a solution general enough, on the other… In all
honesty, having learnt more about SILE’s internals, I now had a few doubts.
Nevertheless, I decided to renew my involvement for another 3-month charter,
this time focussed on typesetting a complete book. After all, I had written
around 17 packages and a great book class: It was time to put them to an actual
real-scale use.

It obviously raised issues in my own packages and classes. That was to be expected.
Hence, they received a lot of fixes and improvements. They are now far better than
what they were when I initially wrote my first preface. Besides other fixes and proposals
submitted to the SILE core distribution, new packages also came to
light, such as \autodoc:package{framebox}, \autodoc:package{barcodes.ean13} and the
experimental \autodoc:package{fancytoc} and \autodoc:package{printoptions}.
SILE reached version 0.12.5 and I even started proposing some of the packages
described in this document (or modifications of them), for inclusion in the
standard distribution. We’ll see whether it comes to fruition, and how.

It also raised several annoying issues in SILE itself… As stated,
I expected my book project to be completed around March 2022, but the time-frame
shifted by a few months. Real-life constraints and proofreading sessions also
played a part… Let’s say, after all, that an extended 5- to 6-month charter was
actually required for the project to be achieved, with several hacks to circumvent
bug issues\footnote{%
I got real annoyed to discover, that late in the process, that SILE couldn't do
hyphenation properly and justify text correctly when fonts have ligatures…}
and with a less bold layout than envisioned\footnote{%
Not being able to use the so-said InDesign-like frames in any decent way was
one of the most painful learnings…}.

Yet, the 362-page book was eventually
\href[src=https://sites.google.com/site/dragonbrumeux/contes-et-l%C3%A9gendes-dalmaq]{completed}\footnote{%
\url{https://sites.google.com/site/dragonbrumeux/contes-et-l\%C3\%A9gendes-dalmaq}}.
I had decided early in the process that its full SILE sources would be provided in
the “examples” folder of my GitHub repository for these packages and classes,
so than anyone possibly interested could check how I addressed my needs.

My first question, in a certain way, got an answer. Overall, the experience was
fun, despite the hiccups and fallback decisions. I don’t regret it and I am fairly
satisfied with the result, though I am also concerned many things are fragile
and will possibly break as SILE goes on evolving. Not wanting to sound too pessimistic,
I still don’t know the answer to the
second question… Time only will tell.

\medskip
\couyard[type=8,width=default]

\part{Packages & Classes}

\begin{figure}
FIXME LATER
%\img[src=docs/images/printing_press.png, width=60%pw]
\caption{Gutenberg’s press.}
\end{figure}

\chapter{Packages}

\section{End-user packages provided in the resilient collection}

These are standalone packages users can use in their own documents.

\subsection{resilient.abbr: a few shorthands & abbreviations}

\package-documentation{resilient.abbr}

\subsection{resilient.epigraph: a lightweight epigraph environment}

\package-documentation{resilient.epigraph}

\subsection{resilient.lists: enhanced enumerations and bullet lists}

\package-documentation{resilient.lists}

\subsection{resilient.poetry: a poetry environment}

\package-documentation{resilient.poetry}

\section{End-user packages provided independently}

\subsection{couyards: printer’s ornaments}

\package-documentation{couyards}

\subsection{colophon: shaped & decorated paragraphs}

(No yet migrated)

%\package-documentation{colophon}

\subsection{fancytoc: alternative table of contents}

\package-documentation{fancytoc}

Here it is at work for the current document with default parameters.
Since our book class supports parts at level 0, we get the parts
and chapters.

\fancytableofcontents

\bigskip
And here it is stating at level 1, i.e. chapters and sections.

\fancytableofcontents[start=1]

\subsection{labelrefs: cross-references}

\package-documentation{labelrefs}

\subsection{struts: rules with no width but a certain height}

\package-documentation{struts}

\subsection{parbox: paragraphs in an horizontal box}

\package-documentation{parbox}

\subsection{ptable: flexible tables}

\package-documentation{ptable}

\subsection{redefine: (basic) command redefinition}

(Not yet migrated)

%\package-documentation[src=packages/redefine]

\subsection{framebox: fancy box framing}

\package-documentation{framebox}

\subsection{ean13: EAN-13 barcodes for ISBN etc.}

\package-documentation{barcodes.ean13}

\subsection{textsubsuper: native superscripts & subscripts}

\package-documentation{textsubsuper}

\section{Technical packages}

These packages are not intended to be used alone, but provide utilities
for other packages. They are therefore mainly aimed at package and
class writers.

\subsection{resilient.styles: style specifications}

(Migrated, but documention needs refactorings)

%\package-documentation[src=packages/styles]

\subsection{resilient.sectioning: an abstraction for sectioning commands}

(Migrated, but documention needs refactorings)

%\package-documentation[src=packages/sectioning]

\subsection{resilient.footnotes: footnotes redone}

\package-documentation{resilient.footnotes}

\subsection{resilient.tableofcontents: tables of contents redone}

(Obviously working, documentation not included pending fixes)
%\package-documentation{resilient.tableofcontents}

\subsection{resilient.headers: page headers revisited}

\package-documentation{resilient.headers}

\section{Experimental packages}

\subsection{printoptions: tools for professional printers}

(Not yet migrated)
%\package-documentation[src=packages/experimental/printoptions]

\section{Specialized packages}

\subsection{teidict: XML TEI P4 print dictionaries}

(Not yet migrated)
%\package-documentation[src=packages/teidict]

%\subsection{teiabbr: localized abbreviations for TEI dictionaries}

%\package-documentation[src=packages/teiabbr]

\chapter{Classes}

\section{resilient.book: a book class redone}

The design of this class was started as an attempt at gradually tuning the
default book class from SILE to this author’s needs and taste. It eventually
evolved into a full redesign on different grounds. This very document uses it,
so you can see it in real action.

\subsection{Standard sectioning commands}

The class supports the following sectioning commands, from the highest
division level to the lowest: \autodoc:command{\part}, \autodoc:command{\chapter},
\autodoc:command{\section}, \autodoc:command{\subsection}, \autodoc:command{\subsubsection}.

All sectioning commands obey styles (relying on the
\autodoc:package{resilient.styles} and \autodoc:package{resilient.sectioning} packages), which notably
imply that they have a lot of customization possibilities.
In the following pages, the described behaviors apply to the default
configuration and styling, out-of-the-box.

All the sections accepts the \autodoc:parameter{numbering=false} option, if you want
them unnumbered, and the \autodoc:parameter{toc=false} option, if you do not want them
to appear in the table of contents. When they do, they correspond to “level 0”
(parts) up to “level 4” (subsubsections).

Remember a good advice—“Writers that think they need more than five levels should
instead consider restructuring their document in a manner that does not require
this level of nested sectioning. Increased section granularity can actually begin
to detract from document clarity.”

\define[command=ptable:cell:hook]{\raggedright{\noindent\style:font[size=-1]{\process}}}%
% FIXME Maybe the class should load ptable and override the hook to actually supported
% styles, that would be both convenient and consistent.
\begin{table}
\begin[cols=40%fw 50%fw, header=true]{ptable}
  \begin[background=#eee]{row}
    \cell[valign=top]{Style}
    \cell[valign=top]{Description}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{sectioning-base}}
    \cell[valign=top]{(Paragraph style inherited by all sectioning commands.)}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{sectioning-⟨\em{section type}⟩}}
    \cell[valign=top]{(Sectioning) style applied to that sectioning command.}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{sectioning-⟨\em{part|chapter}⟩-number}}
    \cell[valign=top]{Style pre-defined for parts and chapters for styling their number.}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{sectioning-other-number}}
    \cell[valign=top]{Style pre-defined for other sectioning commands for styling the
      section number.}
  \end{row}
\end{ptable}
\caption{Styles used for sectioning commands.}
\end{table}

By default, parts disable page numbering and running headers on their page.
Chapters have page numbering enabled on their first page and make sure
no header shown is shown on that page. Both start on an odd page\footnote{Again,
as almost everything depending on styles, this can be customized.}, and the previous
even page, if inserted blank, is shown without page number and header. Parts and chapters
reset the footnote counter. Chapter and section titles go in odd and even running
headers respectively, unless customized otherwise.

Notably, the class also defines a few commands currenty used as hooks in some of the
above sectioning styles.

\begin{table}
\begin[cols=40%fw 50%fw, header=true]{ptable}
  \begin[background=#eee]{row}
    \cell[valign=top]{Command}
    \cell[valign=top]{Description}
  \end{row}
  \begin{row}
    \cell[valign=top]{\autodoc:command{\sectioning:part:hook}}
    \cell[valign=top]{Clears all page headers, disable the folios globally,
      resets the footnote counter and the chapter counter.}
  \end{row}
  \begin{row}
    \cell[valign=top]{\autodoc:command{\sectioning:chapter:hook}}
    \cell[valign=top]{Clears the header on the current page, re-enables folios, resets
      the footnote counter and adds the chapter title to the even running headers (see further below).}
  \end{row}
  \begin{row}
    \cell[valign=top]{\autodoc:command{\sectioning:section:hook}}
    \cell[valign=top]{Adds the section title to the odd running headers (see further below), with its
      counter preprended to it.}
  \end{row}
\end{ptable}
\caption{Pre-defined command hooks used by sectioning commands.}
\end{table}

\subsection{Captioned figures and tables}

The class provides two additional environnments, \autodoc:environment{figure}
and \autodoc:environment{table}. Both can contain arbitrary contents and a
\autodoc:command[check=false]{\caption{<text>}} element. The latter is
extracted and displayed below the contents.
By default, these environments show their contents centered, with a numbered caption.
Each of them has its own distinct counter.
The figure environment is (normally) intended to be used around an illustration.

\begin{table}
\begin[cols=40%fw 50%fw, header=true]{ptable}
  \begin[background=#eee]{row}
    \cell[valign=top]{Style}
    \cell[valign=top]{Description}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{figure}}
    \cell[valign=top]{Style applied to the figure content (not including the caption).}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{figure-caption}}
    \cell[valign=top]{Style applied to the figure caption.}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{figure-caption-number}}
    \cell[valign=top]{Style applied to the caption number.}
  \end{row}
\end{ptable}
\caption{Styles used for figures.}
\end{table}

The table environment is (normally) intended to be used around… tables, you would
have guessed it.

\begin{table}
\begin[cols=40%fw 50%fw, header=true]{ptable}
  \begin[background=#eee]{row}
    \cell[valign=top]{Style}
    \cell[valign=top]{Description}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{table}}
    \cell[valign=top]{Style applied to the table content (not including the caption).}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{table-caption}}
    \cell[valign=top]{Style applied to the table caption.}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{table-caption-number}}
    \cell[valign=top]{Style applied to the caption number.}
  \end{row}
\end{ptable}
\caption{Styles used for tables.}
\end{table}

The figure and table caption styles are actually sectioning styles, and the captions are
inserted into the table of contents at level 5 and 6 respectively. It implies that one has
the possibility to have them shown in the TOC, if passing a sufficient \autodoc:parameter{depth}
value to the \autodoc:command{\tableofcontents} command. While some authors may appreciate that,
other, most likely, prefer having them in separate lists. Two convenience commands are
provided to that effect.

\begin{table}
\begin[cols=40%fw 50%fw, header=true]{ptable}
  \begin[background=#eee]{row}
    \cell[valign=top]{Command}
    \cell[valign=top]{Description}
  \end{row}
  \begin{row}
    \cell[valign=top]{\autodoc:command{\listoffigures}}
    \cell[valign=top]{Outputs the list of figures.}
  \end{row}
  \begin{row}
    \cell[valign=top]{\autodoc:command{\listoftables}}
    \cell[valign=top]{Outputs the list of tables.}
  \end{row}
\end{ptable}
\caption{Commands for lists of figures and tables.}
\end{table}

But basically, they are just simple calls to \autodoc:command{\tableofcontents} with the
appropriate options to start at the corresponding TOC level and display only that level.
The only noteworthy advantage is that they check the styles in order to find out which
level is concerned, so they may apply even if TOC levels are customized differently.

As a final but important note, despite their name, the figure and table environments
are not “floating” objects in the sense that this concept has in LaTeX. In other terms,
they are always inserted where declared in the page, without attempt to possibly move
their material to some other position or a later page.

\subsection{Headers & Footers}

Page numbers (folios) and running headers are by default flushed left or right depending
on the page they are on, rather than centered. This is defined via paragraph styles, so it
can actually be customized at convenience. The default styles also include an inheritance
to a common “base” style (suitable for selecting the font size, etc.). Nothing mandates
it, but if you want to redefine these styles, we recommend keeping an appropriate
style hierarchy, rather than stacking all definitions in a single style. Well-thought,
it can simplify the task for other later customizations.

\begin{table}
\begin[cols=40%fw 50%fw, header=true]{ptable}
  \begin[background=#eee]{row}
    \cell[valign=top]{Style}
    \cell[valign=top]{Description}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{folio-base}}
    \cell[valign=top]{(Style inherited by the other folio styles.)}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{header-base}}
    \cell[valign=top]{(Style inherited by the other header styles.)}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{folio-even}}
    \cell[valign=top]{(Paragraph) style applied to the folio on even pages.}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{folio-odd}}
    \cell[valign=top]{(Paragraph) style applied to the folio on odd pages.}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{header-even}}
    \cell[valign=top]{(Paragraph) style applied to the header on even pages.}
  \end{row}
  \begin{row}
    \cell[valign=top]{\code{header-odd}}
    \cell[valign=top]{(Paragraph) style applied to the header on odd pages.}
  \end{row}
\end{ptable}
\caption{Styles used for folios and headers.}
\end{table}

The class also defines two commands for manipulating the page headers.

\begin{table}
\begin[cols=45%fw 45%fw, header=true]{ptable}
  \begin[background=#eee]{row}
    \cell[valign=top]{Command}
    \cell[valign=top]{Description}
  \end{row}
  \begin{row}
    \cell[valign=top]{\autodoc:command{\even-running-header{<content>}}}
    \cell[valign=top]{Registers the content to be used in even running headers.}
  \end{row}
  \begin{row}
    \cell[valign=top]{\autodoc:command{\odd-running-header{<content>}}}
    \cell[valign=top]{Registers the content to be used in odd running headers.}
  \end{row}
\end{ptable}
\caption{Commands for manipulating page headers.}
\end{table}

Page headers rely on the functionality provided by the \autodoc:package{resilient.headers} package,
so the \autodoc:command{\noheaders}, \autodoc:command{\noheaderthispage} and \autodoc:command{\headers}
commands are available, as well as \autodoc:command{\header:rule}.

\subsection{Block-indented quotes}

The class provides the \autodoc:environment{blockquote} environment to typeset simple block-indented
paragraphs of the kind shown in the \autodoc:package{resilient.styles} package documentation. It is sort
of an extra, but it was so often needed by this author that he decided to include it in
standard.

The environment relies on the same-named style for its styling and on the
\autodoc:setting{book.blockquote.margin} setting for its indentation (defaults to 2em). Indented
quotes can be nested.

\subsection{Other features}

The footnotes are based on the \autodoc:package{resilient.footnotes} package and therefore have the
extra features proposed in this implementation, notably the \autodoc:command{\footnote:rule}
command and the possibility to specify an explicit \autodoc:parameter{mark} on footnote calls.

The table of contents relies on the \autodoc:package{resilient.tableofcontents} package. One can
therefore change many styling and appearance aspects to create a custom table of contents.

Cross-references are supported via the \autodoc:package{labelrefs} package, henceforth
the \autodoc:command{\label}, \autodoc:command{\ref} and \autodoc:command{\pageref} commands are
available.

Regarding the page layout, note that it has slightly different default page masters
than the legacy book class of SILE, as the gutter space was found to be too small,
in this author’s opinion.

\subsection{Page layouts}

Paper sizes varied a lot across time. Frequent ratios nowadays are 1:√2 (such as the ISO paper
sizes, e.g. A4, 21 × 29.7 cm) or 2:3 (such as US trade , 6 × 9 in), though there are still
plenty of other page formats in use (e.g. French paperbacks books often often come in 10 × 17 cm
or 10 × 18 cm format.)

The relation betwen the page size and the main text block also varied a lot,
depending on the aesthetic tastes of authors and designers. The \code{resilient.book}
class provides a \autodoc:parameter{layout=<string>} class option for selecting some fairly
usual page layouts. They are shown below for comparison, applied to an A4 format, though their
historical use may have favored a different paper size.

It has to be noted, too, that these common layouts rarely detailed where headers or
folios were to be placed. The corresponding blocks are shown too, as you would get
them currently. This class may possibly consider options for that, in a future
release.

\subsubsection{French layouts or “Canon des ateliers”}

This canon normally applies a 4/10, 5/10, 6/10, 7/10 progression rule to distribute
the white space around the text block (“règle du 10/12\textsuperscript{e}”).

In the standard definition, the 4/10 and 6/10 ratios are used for the
inner and outer margins; and the 5/10 and 7/10 ratios for the top and
bottom margins, but using the same base space value (i.e. taken from the
horizontal direction).

A variant uses only the 4/10 and 6/10 ratios, but vertically applies to the
text block height the same proportion rules as in the horizontal direction.

Another variant uses the values of the inner and outer margin for the top
and bottom margin, leading to pretty dense pages.

This author has also seen several books just using the same proportion rule
in both directions (i.e. as in the second case above), but distributing the vertical
space evenly.

Thus, this package supports four ways of computing and distributing the
margins.

Is it complex enough? Wait, the canon has no less than three different
proportion rules for the text block.\footnote{This author, being French,
will only note that we apparently like to make things more complex than
they ought to be.}

For regular material (“imprimé courant”), the width of the text block takes 3/4 of the
page width.
So here we have the standard \code{ateliers} (= \code{ateliers:1}) and
its variants \code{ateliers:2} to \code{ateliers:4}.

\begin{figure}
\img[height=15%ph, src=./layout-ateliers.png]
\caption{Canon des ateliers — standard}
\end{figure}

In the demi-luxe variant, the width of the text block takes 2/3 of the
page.
Here again, we have the standard \code{demiluxe} (= \code{demiluxe:1}) and
its variants \code{demiluxe:2} to \code{demiluxe:4}.

\begin{figure}
\img[height=15%ph, src=./layout-demiluxe.png]
\caption{Canon des ateliers — demiluxe}
\end{figure}

In the “de luxe” variant, the width of the text block takes 5/8 of the
page.
As you would have guessed, these are the standard \code{deluxe} (= \code{deluxe:1}) and
its variants \code{deluxe:2} to \code{deluxe:4}.

\begin{figure}
\img[height=15%ph, src=./layout-deluxe.png]
\caption{Canon des ateliers — deluxe}
\end{figure}

\subsubsection{Ratio-based layouts}

In the 13\textsuperscript{th} century, the architect Villard de Honnecourt
came up with what he considered a “harmonious” and pleasing design (esp.
for 2:3 pages), using a 1/9 ratio and a text block area in the same proportions
as the page, with a matching diagonal.

In the 15\textsuperscript{th} century, Marcus Vencentinus used a similar
method, but with a 1/6 ratio, for a prayer book. It has a wide outer margin
and footer area, leaving enough place for annotations and marginal comments.

The rather quite large footer area in such layouts is based on the idea that
books are held by the lower margin when taken in the hand.

This class proposes them as \code{honnecourt} and \code{vencentinus}.

\begin{figure}
\img[height=15%ph, src=./layout-division-old.png]
\caption{Divisions by ratio — historical layouts}
\end{figure}

For the record, such ratio-based methods are also known as the Van de Graaf canon,
after he rediscovered and documented them in the 1940s. They are also sometimes
referred to as the “secret canon” used in many medieval manuscripts and incunabula.

These methods are based on regular divisions of the page, mere arithmetical operations
which may be generalized for any page dimention \em{W} × \em{H}, with a ratio \em{N}
and a constant \em{v}. In the Honnecourt and Vencentinus' canons, \em{v}=2,
but other values are possible.

In a method he described on the French \em{Typographie}
mailing list in 2002, Olivier Randier suggested that the \em{H/W} ratio
was usually giving excellent results for most standard page sizes, including the ISO
ones.
Following these “modern” findings, this class provides \code{division:6} (1/6 ratio),
\code{division:9} (1/9 ratio, alias \code{division} as it is the most usual and pleasant
layout) and the fairly compact \code{division:12} (1/12 ratio).

\begin{figure}
\img[height=15%ph, src=./layout-division.png]
\caption{Divisions by ratio — modern layouts}
\end{figure}

\subsubsection{The golden canon of Tschichold}

Jan Tschichold (1902–1974) considered a “golden canon of page construction”,
where the text block is placed onto the page in such a way as its diagonal coincides
with the page relevant diagonal, and the circle inscribed within the text block is tangent
to the page sides. This class provides it as the \code{canonical} layout.

\begin{figure}
\img[height=15%ph, src=./layout-canonical.png]
\caption{Canonical layout}
\end{figure}

\subsubsection{The legacy layout}

There is not much to say about the \code{legacy} layout, kept for compatibility
with earlier versions of this class. It is derived from SILE’s standard
book class, but manually tweaked to this author’s taste before he had time to
consider the above methods. The layout is therefore quite empirical.

\section{resilient.resume: a minimalist curriculum vitae}

This class provides a minimalist (read, naive) way to make a modern \em{résumé} (CV) with SILE.

\smallskip
\begin{itemize}
\item{Fonts}
\begin{itemize}
  \item{You should select, early in your document, the main font to be used. This class ideally
        works best with a font family that has: a thin style, an italic style, a light-weight (300)
        bold italic, a bold (600) regular. Lato, for instance, is such a font.}
  \item{Dingbat symbols rely on the Symbola font. You can change it by redefining the \code{resume-dingbats}
        style.}
  \end{itemize}
  \item{Colors should not be abused in a CV, so this class proposes only three different colors.}
  \begin{itemize}
    \item{Two tints of gray for your first and last name, job title and headline.}
    \item{A nice tint of blue (#4080bf) for various sectioning and display elements. You can change it
        by redefining the \code{resume-color} style.\footnote{Likewise for your first and last name
        correspond to the \code{resume-firstname} and \code{resume-lastname} styles respectively.}}
  \end{itemize}
  \item{Page layout}
  \begin{itemize}
  \item{The first page does not have a header, but on subsequent pages the header repeats your full name.
        The rationale is that your name shall be visible on each page, as the HR people get hundreds of CVs and
        can easily get lost in them.}
  \item{The footer is shown side-by-side with the page folio, and contains your contact information. As for
        the header, the rationale is that your contacts should be repeated. You wouldn’t want not to be
        contacted just because the HR people lost the initial page, right?}
  \item{The folio includes the number of pages in your CV. As said, they
        get to see hundreds of CV. Be nice ensuring they have no ordering issue when handling a printed
        copy to managers, and do not miss any page.}
  \end{itemize}
\end{itemize}

\smallskip

The commands are pretty simple and straightforward in this first version, so you can refer
to the sample CV included in our example repository.

\begin{figure}
\framebox[padding=0, shadow=true, shadowcolor=220]{\img[width=45%fw, src=examples/resume-sample.pdf, page=1]}%
\kern[width=3pt]%
\framebox[padding=0, shadow=true, shadowcolor=220]{\img[width=45%fw, src=examples/resume-sample.pdf, page=2]}
\caption{A sample CV for a famous detective.}
\end{figure}

\section{teibook: XML TEI P4 print dictionaries}

This is a book-like class for (XML) TEI dictionaries.

It just defines the appropriate page masters, sectioning hooks
and loads all needed packages. The hard work processing the
XML content is done in the \autodoc:package{teidict} package.

This author does not intend to discuss it in full here.
To see it in action, you can refer to our small example in
\href[src=https://github.com/Omikhleia/omikhleia-sile-packages/tree/main/examples]{our
repository}\footnote{\url{https://github.com/Omikhleia/omikhleia-sile-packages/tree/main/examples}}.
For a more complex project using the same tools, you may also check
the \href[src=https://omikhleia.github.io/sindict/]{sindict
repository}\footnote{\url{https://omikhleia.github.io/sindict/}}.

\part{Tips & Tricks}

\begin{figure}
%\img[src=docs/images/printer_1568.png, width=50%pw]
\caption{Printers in 1568.\footnote[mark=†]{Meggs, Philip B.,
  \em{A History of Graphic Design,} John Wiley & Sons, Inc. 1998, p. 64.}}
\end{figure}

% Let's have fun and define a new sectioning command for questions.
\style:define[name=omi:question]{
   \font[style=italic]
   \paragraph[skipbefore=smallskip, indentbefore=false, skipafter=smallskip, breakafter=false]
   \sectioning[counter=questions, level=1, display=arabic, goodbreak=false, numberstyle=omi:question:number]
}
\style:define[name=omi:question:number]{
   \numbering[before=Q, after=.]
}

\define[command=Q]{\sectioning[style=omi:question, toc=false]{\process}}

\chapter{Customizing your resilient book}

The class draws heavily upon the concept of “styles”. While you could refer to the
documentation of that package and look at the class source code for the styles it
defines for almost everything, we thought a few standard questions would be best
addressed here.

\section{Chapters & sections}

\Q{Can I have indented paragraphs after section titles?}

If you are, say, French, and want all sections to be followed by indented paragraphs,
you can therefore enter, early in your document:

%\style:redefine[name=sectioning-base, as=_secbase, inherit=true]{\paragraph[indentafter=true]}

\smallskip
\codeblock{\\style:redefine[name=sectioning-base, as=_secbase, inherit=true]\{\par
\qquad\\paragraph[indentafter=true]\}}
\smallskip

This \codeblock{sectioning-base} style is inherited by all other sectioning
commands.

\Q{Paper is costly, I do not want chapters to open on an odd page.}

I have seen this used mostly in huge novels, where modern editors relax the ancient rule, or
mere convention, that says that chapters always have to open on an odd page.

%\style:redefine[name=sectioning-chapter, as=_chapter, inherit=true]{\sectioning[open=any]}

\smallskip
\codeblock{\\style:redefine[name=sectioning-chapter, as=_chapter, inherit=true]\{\par
\qquad\\sectioning[open=any]\}}
\smallskip

Likewise, the same solution could be applied to \codeblock{sectioning-part}, would you
need that too.

\Q{Can I have my chapter numbers in roman?}

I bet you are writing a novel.

%\style:redefine[name=sectioning-chapter, as=_chapter, inherit=true]{\sectioning[display=ROMAN]}

\smallskip
\codeblock{\\style:redefine[name=sectioning-chapter, as=_chapter, inherit=true]\{\par
\qquad\\sectioning[display=ROMAN]\}}
\smallskip

\Q{Can I remove that dot after the section numbers?}

For sections and lower levels:

%\style:redefine[name=sectioning-other-number, as=_sclabel, inherit=true]{\numbering[after=false]}

\smallskip
\codeblock{\\style:redefine[name=sectioning-other-number, as=_sclabel, inherit=true]\{\par
\qquad\\numbering[after=false]\}}
\smallskip

\Q{Chapters and parts have English labels?}

%\style:redefine[name=sectioning-chapter-number, as=_chlabel, inherit=true]{\numbering[before="Chapitre "]}

By default, yes. This author does not believe in localized strings at all. And I have
no idea what a “part” would be in your book, anyway. “Part I”, are you sure? What if you typeset, say,
\em{The Lord of the Rings,} wouldn’t that rather be “Book I”? But say you are French and
want “Chapitre” instead of “Chapter”.

\smallskip
\codeblock{\\style:redefine[name=sectioning-chapter-number, as=_chlabel, inherit=true]\{\par
\qquad\\numbering[before="Chapitre "]\}}
\smallskip

And likewise for \codeblock{sectioning-part-number}. As for sections in the previous
question, the label also has a \codeblock{post} specifier. So I guess you have all
the keys for chapter numbering in Japanese or Chinese.

\section{Footers & headers}

\Q{Can I have folios (page numbers) centered? I prefer that.}

The class always distinguishes between odd and even pages, so here you will need
two redefinitions, to override the default alignments.

%\style:redefine[name=folio-odd, as=_folodd, inherit=true]{\paragraph[align=center]}
%\style:redefine[name=folio-even, as=_foleven, inherit=true]{\paragraph[align=center]}

\smallskip
\codeblock{\\style:redefine[name=folio-odd, as=_folodd, inherit=true]\{\par
\qquad\\paragraph[align=center]\}}

\codeblock{\\style:redefine[name=folio-even, as=_foleven, inherit=true]\{\par
\qquad\\paragraph[align=center]\}}

\Q{Can I have running headers centered too?}

As for the previous question, but with the header styles.

%\style:redefine[name=header-odd, as=_headodd, inherit=true]{\paragraph[align=center]}
%\style:redefine[name=header-even, as=_headeven, inherit=true]{\paragraph[align=center]}

\smallskip
\codeblock{\\style:redefine[name=header-odd, as=_headodd, inherit=true]\{\par
\qquad\\paragraph[align=center]\}}

\codeblock{\\style:redefine[name=header-even, as=_headeven, inherit=true]\{\par
\qquad\\paragraph[align=center]\}}

\Q{Can I change the appearance (font, color) of the folios or headers?}

In addition to the abovementioned paragraph styles, you can also redefine the
\codeblock{folio-base} and \codeblock{header-base} parent styles, which specify
their character styles. For instance, I recently read a novel where folios
used the “old-style” numbers.

%\style:redefine[name=folio-base, as=_folbase, inherit=true]{\font[features=+onum]}

\smallskip
\codeblock{\\style:redefine[name=folio-base, as=_folbase, inherit=true]\{\par
\qquad\\font[features=+onum]\}}

\section{Other questions}

Well, do you have any other question that you felt unaddressed? If so, do not
hesitate opening an issue in our repository.

\chapter{A custom book from scratch}

Let us say we now want to typeset Conan Doyle’s “A Scandal in Bohemia” from
\em{The Adventures of Sherlock Holmes,} 1892. It is one of the showcase examples
on SILE’s web site, how good can we render it customizing our class?

\section{An easy start}

Leaving aside the title page–which is another whole topic–, let us concentrate
on our styling. First, of course, we would select a language and a font, as
usual.

\smallskip
\begin{codeblock}
\\language[main=en]\par
\\font[family=Libertinus Serif, size=11pt]
\end{codeblock}

\section{Sectioning…}

What is the sectioning structure of that book? It contains “Adventures”, which
seem to be the top-level sections. Here we leap into the unknown, but let’s
decide they will be our “parts”. But of course, we do not want them do be shown
that way.

\smallskip
\begin{codeblock}
\\style:redefine[name=sectioning-part-number, as=_partlabel, inherit=true]\{\par
\qquad\\numbering[before="Adventure "]\}
\end{codeblock}
\smallskip

The numbering is now good. But we may want a smaller font size than the default,
as well as less vertical spacing before these sections.

\smallskip
\begin{codeblock}
\\style:redefine[name=sectioning-part, as=_part, inherit=true]\{\par
\qquad\\font[size=+4]\par
\qquad\\paragraph[skipbefore=1cm]\}
\end{codeblock}
\smallskip

The next sectioning items are just roman numbers in the original. Let’s
consider them as our “chapters”. The fact that they have no title is
not that annoying, we will just invoke \codeblock{\\chapter\{\}} without
content and that should work. But besides being in uppercase roman,
these sections do not cause a page break and are centered. So let’s override
a few things again. Whoever said chapters always open on odd pages was wrong
here (our parts do, though, and that is probably well).

\smallskip
\begin{codeblock}
\\style:redefine[name=sectioning-chapter, as=_chapter, inherit=true]\{\par
\qquad\\font[size=+2]\par
\qquad\\paragraph[align=center, skipbefore=bigskip, indentafter=true]\par
\qquad\\sectioning[display=ROMAN, open=unset]\}
\end{codeblock}
\smallskip

Er, wait, we do not want “Chapter N” to be displayed, right? Nor any
line-break between the number and the (absent) title. Let’s go wild, and
instead of a redefinition, just wholly clear the default chapter
number style.

\smallskip
\begin{codeblock}
\\style:define[name=sectioning-chapter-number]\{\}
\end{codeblock}

\section{Running headers…}

Time to consider the page headers now. First, we want them centered
and always in italic.

\smallskip
\begin{codeblock}
\\style:redefine[name=header-odd, as=_hdodd, inherit=true]\{\par
\qquad\\paragraph[align=center]\par
\qquad\\font[style=italic]\}\par
\\style:redefine[name=header-even, as=_hdeven, inherit=true]\{\par
\qquad\\paragraph[align=center]\par
\qquad\\font[style=italic]\}
\end{codeblock}
\smallskip

Now we get into another sort of problem. By default, the chapter titles
go in the even page header. But in our case they are empty, and we will
later want our book title in that header. Moreover, the chapters
were initially made to open on an odd page, without header, so they
cancel it on their own page. You know what? Maybe we did not decide
to customize the \em{right} section types. Anyway, we are here, so we
go wild again an kill the chapter hook that does all these things.
Sticking with our choice, we do not need any of them, after all.

\smallskip
\begin{codeblock}
\\define[command=sectioning:chapter:hook]\{\}
\end{codeblock}
\smallskip

On the other hand, we want our part title to go in the odd
page header. We need to rewrite its hook in order to do this,
but still keeping the other things it does (cancelling the header on this
very page, and resetting some counters).

\smallskip
\begin{codeblock}
\\define[command=sectioning:part:hook]\{\par
\qquad\\noheaderthispage\par
\qquad\\odd-running-header\{\\process\}\par
\qquad\\set-counter[id=foonote, value=1]\par
\qquad\\set-multilevel-counter[id=sections, level=1, value=0]\}
\end{codeblock}
\smallskip

Finally, let’s globally set our book title in the even page header,
and we are all done, or nearly.

\smallskip
\begin{codeblock}
\\even-running-header\{The Adventures of Sherlock Holmes\}
\end{codeblock}

\section{A fancy table of contents}

What’s left, now? Ah, that table of contents. Of course, we only have one
significant level, our parts, which correspond to the TOC level 0. So we
will use \codeblock{\\tableofcontents[depth=0]} at the right time. But in
the 1892 book, the numbering was shown and had some extra punctuations and
spacing after it. Let’s replace wholly the default style by our own, trying to
reproduce the same effect as in the original book.

\smallskip
\begin{codeblock}
\\style:define[name=toc:level0]\{\par
\qquad\\toc[numbering=true, pageno=true, dotfill=true]\par
\qquad\\numbering[after=.—, kern=3spc]\par
\qquad\\paragraph[indentbefore=false, skipbefore=smallskip]\}
\end{codeblock}

\section{More goodies?}

Surely, we are done now. Wait, I am super-lazy, really. Later in that story,
there is a letter from Irene Adler. In the original print, it used some
small capitals. They didn’t do it, but it might also be styled appropriately
in some sort of quote. These are surely things I will need
again and again, so why not try using styles for them?

This one is so dumb, I should feel ashamed.

\smallskip
\begin{codeblock}
\\style:define[name=caps]\{\\font[features=+smcp]\}\par
\\define[command=caps]\{\\style:apply[name=caps]\{\\process\}\}
\end{codeblock}
\smallskip

This one is (a bit) more clever: it defines a command that typesets its content
with indented left and right skips, registers it as a valid alignment option
for paragraph styles, declares the so-said style, and finally defines a
convenience command to wrap it all.\footnote{This book class ended up having a better
\code{blockquote} environment, eventually. For the sake of illustration,
however, we keep this documentation unchanged.}

\smallskip
\begin{codeblock}
\\begin\{script\}\par
SILE.registerCommand("bkquote", function (options, content)\par
\quad{}SILE.settings.temporarily(function ()\par
\qquad{}local indent = SILE.length("2em")\par
\qquad{}SILE.settings.set("document.rskip", SILE.nodefactory.glue(indent))\par
\qquad{}SILE.settings.set("document.lskip", SILE.nodefactory.glue(indent))\par
\qquad{}SILE.process(content)\par
\qquad{}SILE.call("par")\par
\quad{}end)\par
end, "Typesets its contents in a blockquote.")\par
SILE.scratch.styles.alignments["bkquote"] = "bkquote"\par
\\end\{script\}\par
\\style:define[name=bkquote]\{\par
\quad\\font[size=-0.5]\par
\quad\\paragraph[skipbefore=smallskip, skipafter=smallskip, align=bkquote]\}\par
\\define[command=letter]\{\\style:apply:paragraph[name=bkquote]\{\\process\}\}
\end{codeblock}

\section{Where we erred…}

Eventually, it works. Yay. We did a few things wrong, though, or rather, we perhaps
made our task more complex than it ought to be.

\begin{enumerate}
\item{We started with the \code{resilient.book} class, trying to cancel some of
  its behaviours. It could have been simpler to make our own class and design
  our styles from scratch. I cannot be sure, as we also reused, via the
  inheritance mechanism, some existing things. But it is one of the question
  you might have to face. \em{Here later we
  might abstract a base class with all packages set up but no sectioning defined?}}
\item{Remember the doubts we faced above, “Maybe we did not decide
  to customize the \em{right} section types”. Later, I came across the complete
  stories of Sherlock Holmes in another edition, where \em{The Adventures} is but
  a section. So our parts could have been chapters, and so on. Properly
  sectioning a work is decidely a hard task, one never knows how it will end.
  But we have all the tools to do it.}
\end{enumerate}

\end{document}
